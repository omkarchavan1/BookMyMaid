{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Parser } from \"../Parser.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { parseNumericPattern, parseNDigits, isLeapYearIndex } from \"../utils.js\";\nexport class DayOfYearParser extends Parser {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"priority\", 90);\n\n    _defineProperty(this, \"subpriority\", 1);\n\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);\n  }\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case 'D':\n      case 'DD':\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n\n      case 'Do':\n        return match.ordinalNumber(dateString, {\n          unit: 'date'\n        });\n\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    var year = date.getUTCFullYear();\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setUTCMonth(0, value);\n    date.setUTCHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/abhi/Desktop/BokMyMaid/react pages/BookMyMaid/node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Parser","numericPatterns","parseNumericPattern","parseNDigits","isLeapYearIndex","DayOfYearParser","constructor","arguments","parse","dateString","token","match","dayOfYear","ordinalNumber","unit","length","validate","date","year","getUTCFullYear","isLeapYear","set","_flags","setUTCMonth","setUTCHours"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,MAAAA,KAAK,EAAEA,KAAT;AAAgBG,MAAAA,UAAU,EAAE,IAA5B;AAAkCC,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,SAASQ,MAAT,QAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,eAA5C,QAAmE,aAAnE;AACA,OAAO,MAAMC,eAAN,SAA8BL,MAA9B,CAAqC;AAC1CM,EAAAA,WAAW,GAAG;AACZ,UAAM,GAAGC,SAAT;;AAEAhB,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,EAAnB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,CAAtB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,oBAAP,EAA6B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,CAA7B,CAAf;AACD;;AAEDiB,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE,WAAK,GAAL;AACA,WAAK,IAAL;AACE,eAAOR,mBAAmB,CAACD,eAAe,CAACW,SAAjB,EAA4BH,UAA5B,CAA1B;;AAEF,WAAK,IAAL;AACE,eAAOE,KAAK,CAACE,aAAN,CAAoBJ,UAApB,EAAgC;AACrCK,UAAAA,IAAI,EAAE;AAD+B,SAAhC,CAAP;;AAIF;AACE,eAAOX,YAAY,CAACO,KAAK,CAACK,MAAP,EAAeN,UAAf,CAAnB;AAXJ;AAaD;;AAEDO,EAAAA,QAAQ,CAACC,IAAD,EAAOvB,KAAP,EAAc;AACpB,QAAIwB,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAX;AACA,QAAIC,UAAU,GAAGhB,eAAe,CAACc,IAAD,CAAhC;;AAEA,QAAIE,UAAJ,EAAgB;AACd,aAAO1B,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,GAA9B;AACD,KAFD,MAEO;AACL,aAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,GAA9B;AACD;AACF;;AAED2B,EAAAA,GAAG,CAACJ,IAAD,EAAOK,MAAP,EAAe5B,KAAf,EAAsB;AACvBuB,IAAAA,IAAI,CAACM,WAAL,CAAiB,CAAjB,EAAoB7B,KAApB;AACAuB,IAAAA,IAAI,CAACO,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,WAAOP,IAAP;AACD;;AA1CyC","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nimport { Parser } from \"../Parser.js\";\r\nimport { numericPatterns } from \"../constants.js\";\r\nimport { parseNumericPattern, parseNDigits, isLeapYearIndex } from \"../utils.js\";\r\nexport class DayOfYearParser extends Parser {\r\n  constructor() {\r\n    super(...arguments);\r\n\r\n    _defineProperty(this, \"priority\", 90);\r\n\r\n    _defineProperty(this, \"subpriority\", 1);\r\n\r\n    _defineProperty(this, \"incompatibleTokens\", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);\r\n  }\r\n\r\n  parse(dateString, token, match) {\r\n    switch (token) {\r\n      case 'D':\r\n      case 'DD':\r\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\r\n\r\n      case 'Do':\r\n        return match.ordinalNumber(dateString, {\r\n          unit: 'date'\r\n        });\r\n\r\n      default:\r\n        return parseNDigits(token.length, dateString);\r\n    }\r\n  }\r\n\r\n  validate(date, value) {\r\n    var year = date.getUTCFullYear();\r\n    var isLeapYear = isLeapYearIndex(year);\r\n\r\n    if (isLeapYear) {\r\n      return value >= 1 && value <= 366;\r\n    } else {\r\n      return value >= 1 && value <= 365;\r\n    }\r\n  }\r\n\r\n  set(date, _flags, value) {\r\n    date.setUTCMonth(0, value);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}